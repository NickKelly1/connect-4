@import "scss/variables";
@import "scss/utility";
@import "scss/grid";
@import "scss/overrides";



// TODO: css mixin...
@-webkit-keyframes spin {
  0% { 
    -webkit-transform: rotate(0deg);  /* Chrome, Opera 15+, Safari 3.1+ */
    -ms-transform: rotate(0deg);  /* IE 9 */
    transform: rotate(0deg);  /* Firefox 16+, IE 10+, Opera */
  }
  100% {
    -webkit-transform: rotate(360deg);  /* Chrome, Opera 15+, Safari 3.1+ */
    -ms-transform: rotate(360deg);  /* IE 9 */
    transform: rotate(360deg);  /* Firefox 16+, IE 10+, Opera */
  }
}

// TODO: css mixin...
@keyframes spin {
  0% { 
    -webkit-transform: rotate(0deg);  /* Chrome, Opera 15+, Safari 3.1+ */
    -ms-transform: rotate(0deg);  /* IE 9 */
    transform: rotate(0deg);  /* Firefox 16+, IE 10+, Opera */
  }
  100% {
    -webkit-transform: rotate(360deg);  /* Chrome, Opera 15+, Safari 3.1+ */
    -ms-transform: rotate(360deg);  /* IE 9 */
    transform: rotate(360deg);  /* Firefox 16+, IE 10+, Opera */
  }
}


// https://css-tricks.com/how-to-recreate-the-ripple-effect-of-material-design-buttons/
// Notice that we’re not defining a starting state with the from keyword in the keyframes?
// We can omit from and CSS will construct the missing values based on those that apply to the animated element.
// This occurs if the relevant values are stated explicitly —
// as in transform: scale(0) — or if they’re the default, like opacity: 1.
@keyframes ripple {
  to {
    transform: scale(4);
    opacity: 0;
  }
}